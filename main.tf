terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.16"
    }
  }

  required_version = ">= 1.2.0"
}

provider "aws" {
  region = "eu-north-1"
}

resource "aws_s3_bucket" "calculator_log_bucket" {
  bucket = "calculator-log-bucket"
  tags   = { Environment = "Dev" }
}

resource "aws_s3_bucket_ownership_controls" "calculator_log_bucket_ownership_controls" {
  bucket = aws_s3_bucket.calculator_log_bucket.id
  rule {
    object_ownership = "BucketOwnerPreferred"
  }
}

resource "aws_s3_bucket_acl" "calculator_log_bucket_acl" {
  depends_on = [aws_s3_bucket_ownership_controls.calculator_log_bucket_ownership_controls]

  bucket = aws_s3_bucket.calculator_log_bucket.id
  acl    = "log-delivery-write"
}

resource "aws_s3_bucket_versioning" "log_bucket_versioning" {
  bucket = aws_s3_bucket.calculator_log_bucket.id
  versioning_configuration {
    status = "Disabled"
  }
}

resource "aws_s3_bucket" "calculator_react_front" {
  bucket = "calculator-react-front-bucket"

  tags = {
    Name        = "He He XD"
    Environment = "Dev"
  }

}

resource "aws_s3_bucket_public_access_block" "calculator_react_front" {
  bucket = aws_s3_bucket.calculator_react_front.id

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

resource "aws_s3_bucket_versioning" "versioning_calculator_react_front" {
  bucket = aws_s3_bucket.calculator_react_front.id
  versioning_configuration {
    status = "Disabled"
  }
}

resource "aws_s3_bucket_logging" "calculator_react_front" {
  bucket = aws_s3_bucket.calculator_react_front.id

  target_bucket = aws_s3_bucket.calculator_log_bucket.id
  target_prefix = "s3-access-logs/"
}

resource "aws_s3_bucket_policy" "allow_access_from_cloudfront" {
  bucket = aws_s3_bucket.calculator_react_front.id
  policy = data.aws_iam_policy_document.allow_access_from_cloudfront.json
}

data "aws_caller_identity" "current" {}

data "aws_iam_policy_document" "allow_access_from_cloudfront" {
  statement {
    sid = "PolicyForCloudFrontPrivateContent"
    principals {
      type        = "Service"
      identifiers = ["cloudfront.amazonaws.com"]
    }

    actions = [
      "s3:GetObject*"
    ]

    effect = "Allow"

    resources = [
      aws_s3_bucket.calculator_react_front.arn,
      "${aws_s3_bucket.calculator_react_front.arn}/*",
    ]
    condition {
      test     = "StringEquals"
      variable = "AWS:SourceArn"
      values   = [aws_cloudfront_distribution.calculator_react_front_s3_distribution.arn]
    }
  }
}
# TODO- might need to remove this
locals {
  s3_origin_id = "myS3Origin"
}

resource "aws_cloudfront_origin_access_control" "calculator_react_front_access_control" {
  name                              = "calculator_react_front_access_control"
  description                       = "Policy generated by terraform for the calculator frontend s3 bucket"
  origin_access_control_origin_type = "s3"
  signing_behavior                  = "always"
  signing_protocol                  = "sigv4"
}

resource "aws_cloudfront_distribution" "calculator_react_front_s3_distribution" {
  origin {
    domain_name              = aws_s3_bucket.calculator_react_front.bucket_regional_domain_name
    origin_access_control_id = aws_cloudfront_origin_access_control.calculator_react_front_access_control.id
    origin_id                = aws_s3_bucket.calculator_react_front.id
  }

  enabled             = true
  is_ipv6_enabled     = true
  default_root_object = "index.html"

  logging_config {
    include_cookies = false
    bucket          = "${aws_s3_bucket.calculator_log_bucket.id}.s3.amazonaws.com"
    prefix          = "cloudfrontCalc"
  }

  # aliases = ["test.hp-wash-calculator.com", "hp-wash-calculator.com"]

  default_cache_behavior {
    allowed_methods  = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
    cached_methods   = ["GET", "HEAD"]
    target_origin_id = aws_s3_bucket.calculator_react_front.id

    forwarded_values {
      query_string = false

      cookies {
        forward = "none"
      }
    }

    viewer_protocol_policy = "allow-all"
    min_ttl                = 0
    default_ttl            = 3600
    max_ttl                = 86400
  }

  # Cache behavior with precedence 0
  ordered_cache_behavior {
    path_pattern     = "/content/immutable/*"
    allowed_methods  = ["GET", "HEAD", "OPTIONS"]
    cached_methods   = ["GET", "HEAD", "OPTIONS"]
    target_origin_id = aws_s3_bucket.calculator_react_front.id

    forwarded_values {
      query_string = false
      headers      = ["Origin"]

      cookies {
        forward = "none"
      }
    }

    min_ttl                = 0
    default_ttl            = 86400
    max_ttl                = 31536000
    compress               = true
    viewer_protocol_policy = "redirect-to-https"
  }

  # Cache behavior with precedence 1
  ordered_cache_behavior {
    path_pattern     = "/content/*"
    allowed_methods  = ["GET", "HEAD", "OPTIONS"]
    cached_methods   = ["GET", "HEAD"]
    target_origin_id = aws_s3_bucket.calculator_react_front.id

    forwarded_values {
      query_string = false

      cookies {
        forward = "none"
      }
    }

    min_ttl                = 0
    default_ttl            = 3600
    max_ttl                = 86400
    compress               = true
    viewer_protocol_policy = "redirect-to-https"
  }

  price_class = "PriceClass_100"

  restrictions {
    geo_restriction {
      restriction_type = "whitelist"
      locations        = ["IL", "JO", "LB"]
    }
  }

  tags = {
    Environment = "Dev"
  }

  viewer_certificate {
    cloudfront_default_certificate = true
  }
}

output "acl" {
  value = data.aws_iam_policy_document.allow_access_from_cloudfront.json
}

output "aws_apigatewayv2_integration_uri" {
  value = aws_apigatewayv2_integration.calculator_react_front.integration_uri
}